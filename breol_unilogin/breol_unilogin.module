<?php

/**
 * @file
 * Defines the main functionality for the authentication module.
 */

define('BREOL_UNILOGIN_LOGIN_URL', 'breol-unilogin/login');
define('BREOL_UNILOGIN_LOGOUT_URL', 'breol-unilogin/logout');
define('BREOL_UNILOGIN_REDIRECT_URL', 'breol-unilogin/callback');
define('BREOL_UNILOGIN_LOGOUT_IFRAME_URL', 'breol-unilogin/logout/iframe');
define('BREOL_UNILOGIN_USER_TOKEN_SESSION_KEY', 'breol_unilogin_openplatform_token_for_user');

use Drupal\breol_unilogin\StilUniloginProvider;
use League\OAuth2\Client\Provider\Exception\IdentityProviderException;

/**
 * Implements hook_page_build().
 *
 * Adds simple JS script that detects if the ajax auth redirect has placed a
 * fragment to redo an ajax request.
 *
 * Also added ctools JS need to do ajax redirect commends.
 *
 * We don't know which pages this will happen on, so we add the script to every
 * page.
 */
function breol_unilogin_page_build() {
  if (user_is_anonymous()) {
    ctools_add_js('ajax-responder');
  }
  drupal_add_js(drupal_get_path('module', 'breol_unilogin') . '/js/breol_unilogin.js', 'file');
}

/**
 * Implements hook_ding_provider().
 */
function breol_unilogin_ding_provider() {
  return [
    'title' => 'Openplatform provider',
    'provides' => [
      'openplatform_token' => [
        'prefix' => 'openplatform_token',
      ],
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function breol_unilogin_menu() {
  $items = array();

  $items['admin/config/breol_unilogin'] = array(
    'title' => 'Unilogin',
    'description' => 'Configure Unilogin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breol_unilogin_admin_settings_form'),
    'access arguments' => array('administer users'),
    'file' => 'includes/breol_unilogin.admin.inc',
  );

  $items['admin/config/breol_unilogin/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[BREOL_UNILOGIN_LOGIN_URL] = array(
    'title' => 'Log in',
    'page callback' => 'breol_unilogin_login',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items[BREOL_UNILOGIN_LOGOUT_URL] = array(
    'title' => 'Log out',
    'page callback' => 'breol_unilogin_logout',
    // Shouldn't have access control.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[BREOL_UNILOGIN_LOGOUT_IFRAME_URL] = array(
    'title' => 'Log out iframe',
    'page callback' => 'breol_unilogin_logout_iframe',
    // Shouldn't have access control.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[BREOL_UNILOGIN_REDIRECT_URL] = array(
    'page callback' => 'breol_unilogin_callback',
    // Shouldn't have access control.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_preprocess_menu_link().
 *
 * Change the login link in the top menu to use unilogin module. It's
 * changed here to make it possible to still use the old "/user" login form if
 * breol_unilogin is not enabled.
 */
function breol_unilogin_preprocess_menu_link(&$vars) {
  if (isset($vars['element']['#original_link']['menu_name']) && $vars['element']['#original_link']['menu_name'] == 'menu-tabs-menu') {
    if ($vars['element']['#href'] == 'user') {
      $vars['element']['#href'] = BREOL_UNILOGIN_LOGIN_URL;
    }
  }
}

/**
 * Implements hook_ding_provider_user().
 *
 * This module requires that the provider has authentication support.
 */
function breol_unilogin_ding_provider_user() {
  return array(
    'auth' => array(
      'required' => TRUE,
      'install time setup' => FALSE,
    ),
  );
}

/**
 * Implements hook_ajax_login_command().
 */
function breol_unilogin_ajax_login_command($path) {
  // Javascript needed to do the redirect is loaded in the init hook.
  ctools_include('ajax');

  // Get authentication url and set the path to be redirected back to.
  $url = breol_unilogin_generate_login_url($path);

  // Store the ajax callback url that triggered the ajax auth redirect.
  $_SESSION['oauth2ajax'] = request_path() . '?' . drupal_http_build_query(drupal_get_query_parameters());

  return ctools_ajax_command_redirect($url);
}

/**
 * Provider function.
 */
function breol_unilogin_openplatform_token_login_url($options = []) {
  return url(BREOL_UNILOGIN_LOGIN_URL, $options);
}

/**
 * Set token for user.
 *
 * @param string $token
 *   Token to save.
 */
function breol_unilogin_openplatform_token_set_for_user($token) {
  $_SESSION['BREOL_UNILOGIN_USER_TOKEN_SESSION'] = $token;
}

/**
 * Get the authentication configuration.
 *
 * @return array
 *   Default configuration, if not overridden in the administration settings
 *   form.
 */
function breol_unilogin_get_configuration() {
  global $base_url;

  $config = variable_get('breol_unilogin_settings', []);

  // Allways set redirect url (editing not allowed in admin).
  $config['redirect_uri'] = $base_url . '/' . BREOL_UNILOGIN_REDIRECT_URL;

  // For now only the empty path is a valid redirect URI.
  // @see breol_unilogin_boot().
  $config['redirect_uri'] = $base_url . '/';

  return $config;
}

/**
 * Generate login url endpoint at the IDP.
 *
 * @param string $destination
 *   Override the destination set in the current request. Mainly used in ajax
 *   context. Defaults to empty string.
 *
 * @return string
 *   URL to redirect to at the IDP.
 *
 * @throws Exception
 *   If required libraries are not loaded.
 */
function breol_unilogin_generate_login_url($destination = '') {
  $configuration = breol_unilogin_get_configuration();

  $provider = breol_unilogin_get_provider(TRUE);
  $authorization_url = $provider->getAuthorizationUrl();

  // Get the state generated for you and store it to the session.
  $_SESSION['oauth2state'] = $provider->getState();
  $destination = $destination ?: ($_REQUEST['destination'] ?? NULL);
  ding_user_set_destination($destination);

  // https://viden.stil.dk/display/OFFSKOLELOGIN/Implementering+af+tjeneste#Implementeringaftjeneste-1.3.1Hvordangenerereskorrektcode_challengeogcodeverifier
  // https://medium.com/zenchef-tech-and-product/how-to-generate-a-pkce-challenge-with-php-fbee1fa29379
  $code_verifier = bin2hex(random_bytes(64));
  $hash = hash('sha256', $code_verifier);

  // @see https://base64.guru/developers/php/examples/base64url
  $base64url_encode = function (string $data) {
    // First of all you should encode $data to Base64 string.
    $b64 = base64_encode($data);

    // Make sure you get a valid result, otherwise, return FALSE, as the
    // base64_encode() function does.
    if ($b64 === FALSE) {
      return FALSE;
    }

    // Convert Base64 to Base64URL by replacing “+” with “-” and “/” with “_”.
    $url = strtr($b64, '+/', '-_');

    // Remove padding character from the end of line and return the Base64URL
    // result.
    return rtrim($url, '=');
  };
  $code_challenge = $base64url_encode(pack('H*', $hash));
  $_SESSION['oauth2code_verifier'] = $code_verifier;

  return url($authorization_url, [
    'query' => [
      // https://viden.stil.dk/display/OFFSKOLELOGIN/Implementering+af+tjeneste#Implementeringaftjeneste-1.2EndpointstilOIDCkonfiguration
      'code_challenge' => $code_challenge,
      'code_challenge_method' => 'S256',
    ],
  ]);
}

/**
 * Login menu callback.
 *
 * Starts the authentication process and redirect the user to the authorization
 * service.
 *
 * @throws Exception
 *   If required libraries are not loaded.
 */
function breol_unilogin_login() {
  $authorization_url = breol_unilogin_generate_login_url();

  // Redirect the user to the authorization URL. We don't use drupal_goto as it
  // looks into the destination in the current URL and preforms some magic with
  // it that we don't want.
  header('Location:' . $authorization_url);
  drupal_exit($authorization_url);
}

/**
 * Logout the user from unilogin.
 *
 * @param bool $regen_session
 *   Whether to regenerate session.
 */
function breol_unilogin_logout($regen_session = FALSE) {
  global $base_url;

  // Build base options for logging out.
  $config = breol_unilogin_get_configuration();
  $singleLogout = $config['singleLogout'] ? 'true' : 'false';
  $token = breol_unilogin_openplatform_token_for_user();

  $logout_options = [
    'singlelogout' => $singleLogout,
    // 'redirect_uri' => $base_url,
    'token' => $token,
  ];

  if (breol_unilogin_has_token_client()) {
    // Revoke our current token. It has been retrieved by the token provider
    // using password grants and will not be revoked by Unilogin itself during
    // logout.
    breol_unilogin_revoke_token(
      breol_unilogin_get_provider(),
      $token
    );

    try {
      // Retrieve a new anonymous token and use that for the logout procedure.
      // By using the authentication provider we ensure that Unilogin will
      // redirect to the right site.
      $auth_provider = breol_unilogin_get_provider(TRUE);
      $token = $auth_provider->getAccessToken('password', [
        // Using @ as username and password works as an anonymous user.
        'username' => '@',
        'password' => '@',
      ]);

      $logout_options['token'] = $token->getToken();
    }
    catch (IdentityProviderException $e) {
      watchdog('breol_unilogin', 'Unable to retrieve anonymous token to perform single logout: %message', $e->getMessage(), WATCHDOG_ERROR);
    }
  }

  // Generate logout request for the authorization service and send the request.
  $logout_url = url(
    $config['urlLogout'],
    array(
      'external' => TRUE,
      'query' => $logout_options,
    ));

  if (!$regen_session) {
    // If this was called from user registration reset the session.
    drupal_session_regenerate();
  }

  // We know that we will stop the process and this module has the highest
  // weight, so we will kill the session before redirect.
  session_destroy();

  // Redirect the user to the logout url.
  header('Location:' . $logout_url);
  drupal_exit($logout_url);
}

/**
 * Menu callback for iframes used by the single logout functionality.
 *
 * @see https://github.com/DBCDK/hejmdal/blob/master/docs/single-logout.md
 */
function breol_unilogin_logout_iframe() {
  // Sites which iframe the single logout url can only access the content
  // of the url. We cannot use default access control for this so we setup a
  // response where the return code is mirrored in the content.
  $status_code = 403;
  $reason = 'Forbidden';
  // Only log out SSO users. The user could in theory be logged in as a normal
  // non-SSO user, in this case Unilogin should not be allowed to
  // logout the user.
  if (ding_user_is_logged_in_with_sso()) {
    $status_code = 200;
    $reason = 'OK';

    // We do not call user_logout_current_user() directly as this would cause
    // breol_unilogin_logout() to redirect back to Unilogin.
    session_destroy();

    // Remove token.
    breol_unilogin_openplatform_token_set_for_user(NULL);
  }

  // Logout requests must never be cached. A cached response would cause
  // Unilogin to think the user was logged out when it fact they were
  // not.
  drupal_page_is_cacheable(FALSE);
  drupal_add_http_header('Status', "$status_code $reason");

  $config = breol_unilogin_get_configuration();
  drupal_add_http_header(
    'X-Frame-Options',
    'allow-from ' . $config['singleLogoutOrigin']
  );

  drupal_json_output(array('statusCode' => $status_code));
}

/**
 * Implements hook_user_logout().
 *
 * Ensure that the user is logged out of unilogin.
 */
function breol_unilogin_user_logout() {
  global $user;

  $logout = TRUE;
  if (module_exists('ding_unilogin')) {
    $logout = !ding_unilogin_authenticated($user);
  }

  if ($logout) {
    if (ding_user_is_provider_user($user)) {
      breol_unilogin_logout(TRUE);
    }
  }
}

/**
 * Redirect menu callback.
 *
 * This is the end-point used when coming back from the unilogin login
 * and this will try to log the user into the provider and Drupal.
 */
function breol_unilogin_callback() {
  if (isset($_GET['error'])) {
    drupal_set_message($_GET['error'] . '<br/>' . ($_GET['error_description']), 'error');
    return;
  }

  if (empty($_GET['state']) || empty($_SESSION['oauth2state']) || ($_GET['state'] !== $_SESSION['oauth2state'])) {
    unset($_SESSION['oauth2state']);
    unset($_SESSION['oauth2ajax']);

    drupal_set_message(t('Invalid state detected. Login failed.'));
    _breol_unilogin_redirect_user();
  }
  else {
    if (empty($_SESSION['oauth2code_verifier'])) {
      drupal_set_message(t('Invalid state detected. Login failed.'));
      _breol_unilogin_redirect_user();
      return;
    }

    try {
      // Try to get an access token using the authorization code grant.
      $provider = breol_unilogin_get_provider(TRUE);
      $access_token = $provider->getAccessToken('authorization_code', [
        'code' => $_GET['code'],
        'code_verifier' => $_SESSION['oauth2code_verifier'],
      ]);
      unset($_SESSION['oauth2code_verifier']);

      // Store access token for later usage.
      $_SESSION['oauth2token'] = $access_token->getToken();

      $user_info = $provider->introspectToken($access_token);

      _breol_unilogin_handle_login($user_info);

      // @todo Do something with the user info.
      header('content-type: application/json');
      echo json_encode(['user_info' => $user_info], JSON_PRETTY_PRINT);
      exit;

      if (breol_unilogin_has_token_client()) {
        $username = empty($user_info['attributes']['cpr']) ? $user_info['attributes']['userId'] : $user_info['attributes']['cpr'];
        $pincode = $user_info['attributes']['pincode'];
        if (!empty($username) && !empty($pincode)) {
          // Get a token with less privileges by logging in with name and pin on
          // another client.
          $token_provider = breol_unilogin_get_provider();
          $auth = [
            'agency' => variable_get('ting_agency', ''),
            'username' => $username,
            'password' => $pincode,
          ];
          $token_access_token = $token_provider->getAccessToken('password', $auth);

          breol_unilogin_openplatform_token_set_for_user($token_access_token->getToken());
        }
        else {
          watchdog('breol_unilogin', "Cannot get authentication token, missing username and/or pincode", NULL, WATCHDOG_WARNING);
          breol_unilogin_openplatform_token_set_for_user(NULL);
        }
      }

      //
      // HACK: this invalidates the access token and should be removed later on.
      // This only exists to get around pre-authentication issues currently in
      // FBS.
      //
      // breol_unilogin_revoke_token($provider, $access_token->getToken());
      unset($_SESSION['oauth2token']);

      if (module_exists('ding_registration') && ding_registration_is_registration_request()) {
        // This is an self registration request, so we store the information in
        // the current session. So it can be used to create the user in the
        // library system in the user creation flow in ding_registration.
        // The redirect below will start the process.
        ding_registration_set_user_information($user_info);
      }
      else {
        // Login using the provider.
        if (_breol_unilogin_provider_login($user_info)) {
          // Once the user is logged in then allow other modules to react.
          module_invoke_all('breol_unilogin_login', $user_info);
        }
        else {
          // This can happen if the user is not synced correctly between the
          // local library system (FBS) and CURL at DBC. Then in some special
          // cases you can log in at unilogin, but not the local library
          // system (have happened with "fake" test users in the library
          // system).
          drupal_set_message(t('Login into the local library system failed and you have been signed out. Places try again or contact your local library.'));

          breol_unilogin_logout();
          _breol_unilogin_redirect_user('<front>');
        }
      }

      // Redirect user based on values set in the current session.
      _breol_unilogin_redirect_user();
    }
    catch (IdentityProviderException $e) {
      // Failed to get the access token or user details.
      watchdog_exception('breol_unilogin', $e);

      drupal_set_message(t('Failed to login and get user details for the user.'), 'warning');

      // Clean up session variables to prevent redirects loop.
      unset($_SESSION['oauth2token']);
      unset($_SESSION['oauth2state']);

      // Redirect user back.
      _breol_unilogin_redirect_user();
    }
  }
}

/**
 * Get oAuth2 provider.
 *
 * @param bool $auth
 *   Whether to get the auth client with elevated permissions.
 *
 * @return \Drupal\breol_unilogin\StilUniloginProvider
 *   Provider with basic configuration.
 *
 * @throws Exception
 *   If required libraries are not loaded.
 */
function breol_unilogin_get_provider($auth = FALSE) {
  $configuration = breol_unilogin_get_configuration();
  $provider_options = [
    'urlAuthorize' => $configuration['oidc']['authorization_endpoint'] ?? NULL,
    'urlAccessToken' => $configuration['oidc']['token_endpoint'] ?? NULL,
    'urlResourceOwnerDetails' => $configuration['oidc']['userinfo_endpoint'] ?? NULL,
    'urlTokenIntrospect' => $configuration['oidc']['token_introspection_endpoint'] ?? NULL,
    'redirectUri' => $configuration['redirect_uri'],
    'clientId' => $configuration['client_id'],
    'clientSecret' => $configuration['client_secret'],
  ];

  return new StilUniloginProvider($provider_options);
}

/**
 * Whether we have a less privileged clientId for fetching token.
 *
 * @return bool
 *   Do we have clientId?
 */
function breol_unilogin_has_token_client() {
  $clientId = variable_get('breol_unilogin_token_client_id', NULL);
  $clientSecret = variable_get('breol_unilogin_token_client_secret', NULL);

  return $clientId && $clientSecret;
}

/**
 * Revoke an OAuth2 access token using a provider.
 *
 * @param \Drupal\breol_unilogin\StilUniloginProvider $provider
 *   The OAuth2 provider to use when revoking the token.
 * @param string $access_token
 *   The access token to revoke.
 *
 * @return bool
 *   Whether revoking the token succeeded or not.
 */
function breol_unilogin_revoke_token(StilUniloginProvider $provider, $access_token) {
  $config = breol_unilogin_get_configuration();
  $request = $provider->getAuthenticatedRequest(
    'DELETE',
    $config['revoke'],
    $access_token
  );
  $response = $provider->getResponse($request);
  $success = $response->getStatusCode() == 200;
  if (!$success) {
    watchdog('breol_unilogin',
      "Unable to revoke token: %code %reason",
      [
        '%code' => $response->getStatusCode(),
        '%reason' => $response->getReasonPhrase(),
      ],
      WATCHDOG_CRITICAL);
  }
  return $success;
}

/**
 * Redirect the user.
 *
 * If destination exists in the current session the user is redirect to it, else
 * they are redirected to their profile page.
 *
 * @param string $url
 *   The url to redirect to if destination is not set in the request. Defaults
 *   to /user.
 */
function _breol_unilogin_redirect_user($url = 'user') {
  if (!is_null(ding_user_get_destination())) {
    $url = ding_user_get_destination();
    ding_user_set_destination(NULL);
  }

  // Add fragment to the redirect if this was started as an ajax auth redirect.
  $options = array();
  if (!empty($_SESSION['oauth2ajax'])) {
    $options['fragment'] = 'redo=' . $_SESSION['oauth2ajax'];
    unset($_SESSION['oauth2ajax']);
  }

  // The redirect url may contain query parameters from tracking etc. but this
  // be encoded in drupal_goto below, so we need to split it into an query
  // option.
  $info = drupal_parse_url($url);
  if (array_key_exists('query', $info)) {
    $options['query'] = $info['query'];
  }
  $url = $info['path'];

  drupal_goto($url, $options);
}

/**
 * Login the user into the library system and Drupal.
 *
 * @param array $user_info
 *   User information from the resource service.
 *
 * @return bool
 *   TRUE if successful else FALSE.
 */
function _breol_unilogin_provider_login(array $user_info) {
  $success = FALSE;

  try {
    $account = ding_user_authenticate(array(
      'name' => $user_info['attributes']['uniqueId'],
      'pass' => '',
      'extra' => $user_info,
      'single_sign_on' => !empty($user_info['attributes']['uniqueId']),
    ));

    if ($account !== FALSE) {
      global $user;
      $user = $account;

      // Ensure that the user hooks are called.
      user_login_finalize();

      $success = TRUE;
    }
  }
  catch (Exception $exception) {
    // Exception thrown, log error and carry on.
    watchdog_exception('ding_user', $exception);
    drupal_set_message(t('Unknown error. Please contact the library for help'));
  }

  return $success;
}

/**
 * Implements hook_form_alter().
 */
function breol_unilogin_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    case 'ding_user_authenticate_form':
      $form['breol-unilogin-wrapper'] = array(
        '#type' => 'fieldset',
        '#description' => '<p class="unilogin-title breol-unilogin-title">' . t('Sign in with Unilogin') . '</p>',
        '#weight' => 10,
      );

      $form['breol-unilogin-wrapper']['button'] = array(
        '#attributes' => array(
          'class' => array(
            'unilogin-button breol-unilogin-button',
          ),
        ),
        '#type' => 'link',
        '#href' => BREOL_UNILOGIN_LOGIN_URL,
        '#title' => t('Login'),
        '#options' => array('html' => TRUE),
        '#prefix' => '<div class="unilogin-wrapper breol-unilogin-wrapper">',
        '#suffix' => '</div>',
      );

      $default = variable_get('breol_unilogin_notifications', array());
      if (!empty($default)) {
        $form['breol-unilogin-wrapper']['text'] = array(
          '#markup' => check_markup($default['text']['value'], $default['text']['format']),
          '#prefix' => '<div class="unilogin-notification-text breol-unilogin-notification-text">',
          '#suffix' => '</div>',
        );
      }
      break;

  }
}

/**
 * Lifted from _ding_unilogin_handle_login().
 */
function _breol_unilogin_handle_login(array $user_info) {
  if ($username = $user_info['uniid'] ?? NULL) {
    $success = _ding_unilogin_login($username);

    // Redirect to current_path() to clear most GET parameters.
    $query = [];
    if (isset($_GET['ding-unilogin-trigger']) && $success) {
      // This should propagate if we logged in a user, else it doesn't matter
      // (doesn't make sense to re-display the reservation popup, as it'll
      // just trigger the login form again).
      $query['ding-unilogin-trigger'] = $_GET['ding-unilogin-trigger'];
    }

    // Trying to make less load during morning login, by redirecting users to
    // the user page as this is the default pattern observed.
    $path = drupal_is_front_page() ? '/user/me' : current_path();

    drupal_goto($path, ['query' => $query]);
  }

  // @todo Handle/report error.
}

/**
 * Implements hook_boot().
 */
function breol_unilogin_boot() {
  if ('/' === preg_replace('/\?.*/', '', $_SERVER['REQUEST_URI'])) {
    if (isset($_GET['error'], $_GET['error_description'])
      || isset($_GET['state'], $_GET['session_state'])) {
      unset($_GET['q']);
      $url = BREOL_UNILOGIN_REDIRECT_URL . '?' . http_build_query($_GET);
      header('Location: ' . $url);
      exit;
    }
  }
}
