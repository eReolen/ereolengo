<?php

/**
 * @file
 * Allows users to log in via UNI•Login.
 */

use Drupal\ding_unilogin\ApiRouter;
use Drupal\ding_unilogin\Exception\HttpException;

/**
 * Implements hook_init().
 *
 * Handle UNI•Login and add javascript settings.
 *
 * Monkeypatch AJAX to make a note of the popup triggered, in case we need to
 * re-trigger it later (after logging in via UNI•Login).
 */
function ding_unilogin_init() {
  drupal_add_js(drupal_get_path('module', 'ding_unilogin') . '/js/ding_unilogin_monkeypatch.js', 'file');
  _ding_unilogin_handle_login();
}

/**
 * Implements hook_menu().
 */
function ding_unilogin_menu() {
  $items = array();

  // Administration config page.
  $items['admin/config/ding/unilogin'] = array(
    'title' => 'UNI•Login access',
    'description' => 'Configure UNI•Login access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_unilogin_admin_settings_form'),
    'access arguments' => array('configure unilogin'),
    'file' => 'includes/ding_unilogin.admin.inc',
  );

  $items['admin/config/ding/unilogin_institutions'] = array(
    'title' => 'UNI•Login institutions',
    'description' => 'Configure UNI•Login institutions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_unilogin_admin_institutions_form'),
    'access arguments' => array('configure unilogin'),
    'file' => 'includes/ding_unilogin.admin.inc',
  );

  $items['admin/config/ding/unilogin_api'] = array(
    'title' => 'UNI•Login api',
    'description' => 'Configure UNI•Login api',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_unilogin_admin_api_form'),
    'access arguments' => array('configure unilogin'),
    'file' => 'includes/ding_unilogin.admin.inc',
  );

  $items['ding_unilogin/get/%'] = array(
    'page callback' => 'ding_unilogin_url_json',
    'page arguments' => array(2),
    // Let anyone access.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['unilogin/api/%'] = array(
    'page callback' => 'ding_unilogin_api_router',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'delivery callback' => 'ding_unilogin_jsonapi_deliver',
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 *
 * This is a hack to reload user pages when user presses the back button. When
 * logging out of UNI•Login, the user is left at a dead end, and might use the
 * back button to get back to us. Per default this means they'll end up at the
 * user profile page, apparently still logged in, which is confusing.
 *
 * The problem is that the page is loaded from the bfcache (back-forward cache),
 * which ignores any cache busting headers of the page (which is according to
 * spec, as the history is supposed to show you what you saw).
 *
 * Ideally, UNI•Login should provide a link back to us, but that's not likely to
 * happen any time soon.
 *
 * One is supposed to use the pageshow JS event, however, Chrome has a bug where
 * the event object doesn't have the right persisted value, which is the one
 * that allows us to detect if we're loading from cache or not, so that's not
 * much use.
 *
 * So instead we're relying on the fact that non-JS-created input elements are
 * not reset to their default value when reloading the page from bfcache.
 */
function ding_unilogin_page_alter(&$page) {
  if (arg(0) == 'user') {
    $script = "jQuery(document).ready(function() {
  var e = jQuery('#ding_unilogin_hidden');
  if (e.val() == 'not_from_history') {
    e.val('from_history');
  }
  else {
    e.val('not_from_history');
    // Clear out page while loading.
    jQuery('body').empty();
    window.location.reload(true);
  }
});
";

    $page['content']['ding_unilogin_hidden'] = array(
      '#markup' => '<input id="ding_unilogin_hidden" type="hidden" name="ding_unilogin_hidden" value="not_from_history" />',
      '#attached' => array(
        'js' => array(
          array(
            'data' => $script,
            'type' => 'inline',
            'scope' => 'header',
          ),
        ),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function ding_unilogin_permission() {
  return array(
    'configure unilogin' => array(
      'title' => t('Configure UNI•Login'),
      'description' => t('Allow role to configure UNI•Login settings.'),
    ),
  );
}

/**
 * Ajax callback for getting login URL.
 *
 * JS calls this with the current path of the browser window, in order to get
 * a link to UNI•Login with the return path set properly. The form_alter that
 * inserts the link cannot know what the path of the page is because it's
 * loaded into the popup using AJAX.
 */
function ding_unilogin_url_json($path) {
  drupal_json_output(array('url' => ding_unilogin_url(urldecode($path))));
}

/**
 * Alter the login form.
 *
 * Add in link for logging in via UNI•Login.
 *
 * @param array $form
 *   The form array to alter.
 * @param array $form_state
 *   The state of the form.
 */
function ding_unilogin_form_alter(&$form, &$form_state, $form_id) {
  $form_ids = array(
    'user_login',
    'user_login_block',
    'ding_user_authenticate_form',
  );

  if (in_array($form_id, $form_ids)) {
    if (variable_get('ding_unilogin_id', '')) {
      $form['unilogin_wrapper'] = array(
        '#type' => 'fieldset',
        '#description' => t('Log in via !service', array('!service' => '<span class="unilogin-logo">UNI•Login</span>')),
        '#weight' => -10,
      );

      $form['unilogin_wrapper']['unilogin'] = array(
        '#attributes' => array(
          'class' => array(
            'unilogin-button',
            // Hide the link, the JS will show it when it's set the proper URL.
            'element-hidden',
          ),
        ),
        '#type' => 'link',
        '#href' => '#',
        '#title' => t('Login'),
        '#options' => array('html' => TRUE),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'ding_unilogin') . '/js/ding_unilogin.js',
          ),
        ),
        '#prefix' => '<div class="unilogin-wrapper">',
        '#suffix' => '</div>',
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for profile2_form().
 *
 * Hide the pincode change widget for UNI•Login users. This modules weight
 * ensures we get called after ding_user_form_profile2_form_alter().
 */
function ding_unilogin_form_profile2_form_alter(&$form, &$form_state) {
  if (ding_unilogin_authenticated()) {
    if (isset($form['pass'])) {
      $form['pass']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ding_unilogin_login().
 *
 * Check access with authentication web service, if configured.
 */
function ding_unilogin_ding_unilogin_login($user) {
  // Check that the user has license to access us.
  if (variable_get('ding_unilogin_auth_context', '')) {
    $access = $user->hasLicense(
      variable_get('ding_unilogin_auth_context', ''),
      variable_get('ding_unilogin_auth_project', '')
    );

    if (!$access) {
      watchdog('ding_unilogin', 'UNI•Login user %user does not have appropriate license.', array('%user' => $user->getName()), WATCHDOG_NOTICE);
    }

    return $access;
  }

  return TRUE;
}

/**
 * Implements hook_user_logout().
 *
 * If configured for global logout, make a note for
 * ding_unilogin_drupal_goto_alter to trigger on.
 */
function ding_unilogin_user_logout($account) {
  if (variable_get('ding_unilogin_global_logout', FALSE) && ding_unilogin_authenticated($account)) {
    _ding_unilogin_global_logout(TRUE);
  }
  _ding_unilogin_set_user_data(NULL);
}

/**
 * Implements hook_drupal_goto_alter().
 *
 * Redirect post-logout to UNI•Login logout page if configured for global
 * logout.
 */
function ding_unilogin_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (_ding_unilogin_global_logout()) {
    $path = 'https://sso.emu.dk/logout';
    $options = array('external' => TRUE);
    $http_response_code = 302;
  }
}

/**
 * Implements hook_publizon_client_id_alter().
 *
 * Change Publizon client id for UNI•Login users.
 */
function ding_unilogin_publizon_client_id_alter(&$client_id) {
  if (_ding_unilogin_in_progress() || ding_unilogin_authenticated()) {
    $client_id = variable_get('ding_unilogin_publizon_client_id', '');
  }
}

/**
 * Whether to globally log out.
 *
 * @param mixed $state
 *   The current logout state.
 *
 * @return array|mixed|null
 */
function _ding_unilogin_global_logout($state = NULL) {
  $logout = &drupal_static(__FUNCTION__);
  if (!is_null($state)) {
    $logout = $state;
  }

  return $logout;
}

/**
 * Handle logging in returning UNI•Login users.
 *
 * @see http://www.stil.dk/-/media/STIL/Filer/Publikationer/Tekniske-vejledninger/uni-login-authentication.ashx?la=da
 * @see http://www.stil.dk/It-og-administration/Brugere-og-adgangsstyring/Udbyder-UNILogin/Dokumentation
 */
function _ding_unilogin_handle_login() {
  if (isset($_GET['user']) && isset($_GET['timestamp']) && isset($_GET['auth'])) {

    // Error message in case of errors.
    $error = FALSE;

    // Whether we successfully logged the user in.
    $success = FALSE;

    // Validate ticket.
    $hash = md5($_GET['timestamp'] . variable_get('ding_unilogin_secret', '') . $_GET['user']);
    if ($hash === $_GET['auth']) {
      $time = DateTime::createFromFormat('YmdHis', $_GET['timestamp'], new DateTimeZone('UTC'));
      if ($time) {
        // Check that the given time stamp is in the past (with 5 seconds
        // grace to avoid NTP race conditions), but not older than
        // one minute.
        $now = (new DateTime())->getTimestamp();
        if ($time->getTimestamp() < ($now + 5) && ($now - $time->getTimestamp()) < 60) {
          $success = _ding_unilogin_login($_GET['user']);
        }
        else {
          $error = 'Timestamp %time too old for %user';
        }
      }
      else {
        $error = 'Could not parse timestamp %time for %user';
      }
    }
    else {
      $error = "Auth hash did not validate for %user";
    }

    if ($error) {
      watchdog('ding_unilogin', $error, array('%time' => $_GET['timestamp'], '%user' => $_GET['user']), WATCHDOG_WARNING);
      drupal_set_message(t('Could not understand the reply from UNI•Login, so cannot log you in.'), 'error');
    }
    // Redirect to current_path() to clear most GET parameters.
    $query = array();
    if (isset($_GET['ding-unilogin-trigger']) && $success) {
      // This should propagate if we logged in a user, else it doesn't matter
      // (doesn't make sense to re-display the reservation popup, as it'll
      // just trigger the login form again).
      $query['ding-unilogin-trigger'] = $_GET['ding-unilogin-trigger'];
    }
    drupal_goto(current_path(), array('query' => $query));
  }
}

/**
 * URL to redirect to for UNI•Login.
 */
function ding_unilogin_url($path = NULL) {
  $unilogin_id = variable_get('ding_unilogin_id', '');

  // If no path given default to redirecting back to current path.
  if (!$path && request_uri() != '/') {
    $path = url(request_uri(), array('absolute' => TRUE));
  }
  // UNI•Login does not handle anchors, so we remove them.
  $path = preg_replace('/#.*$/', '', $path);

  if (!$path) {
    return sprintf('https://sso.emu.dk/unilogin/login.cgi?id=%s', $unilogin_id);
  }

  $secret = variable_get('ding_unilogin_secret', '');
  return sprintf('https://sso.emu.dk/unilogin/login.cgi?id=%s&path=%s&auth=%s',
     $unilogin_id,
     urlencode(base64_encode($path)),
     md5($path . $secret)
  );
}

/**
 * Check whether a user is logged in via UNI•Login.
 *
 * @param null $account
 *
 * @return bool
 *   TRUE if authenticated with unilogin else FALSE.
 */
function ding_unilogin_authenticated($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  return isset($account->data['unilogin']) && $account->data['unilogin'];
}

/**
 * Attempt to log in UNI•Login user.
 *
 * @param string $username
 *   The UNI•Login user name.
 *
 * @return bool
 *   Whether the user was logged in.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function _ding_unilogin_login($username) {
  _ding_unilogin_in_progress(TRUE);
  $access = FALSE;
  $unilogin_data = [];

  try {
    $user = new DingUniloginUser(
      $username,
      variable_get('ding_unilogin_ws_user', ''),
      variable_get('ding_unilogin_ws_pass', '')
    );
    $user->setAuthName(ding_user_default_authname($username));

    foreach (module_implements('ding_unilogin_login') as $module) {
      $access = module_invoke($module, 'ding_unilogin_login', $user);
      // Break out if someone denied access.
      if (!$access) {
        break;
      }
    }

    if ($access) {
      $institutions = $user->getInstitutionsIds();
      $municipalities = $user->getInstitutionMunicipalities($institutions);

      $unilogin_data['institutions'] = $user->getInstitutions();

      $libraries = publizon_filter_libraries_list($municipalities);
      if (!empty($libraries)) {
        // Take the first one.
        $library = reset($libraries);
        $retailer_id = $library->retailer_id;
      }
      else {
        watchdog('publizon', 'UNI•Login municipalities @municipalities not configured on any library', array('@municipalities' => implode(', ', $municipalities)), WATCHDOG_NOTICE);
        $access = FALSE;
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Sorry, but there was problems while communicating with UNI•Login. Please try again later.'));
    watchdog_exception('ding_unilogin', $e, NULL, array(), WATCHDOG_ERROR);
    _ding_unilogin_in_progress(FALSE);
    return FALSE;
  }

  if (!$access) {
    drupal_set_message(t('Sorry, but that UNI•Login account has not been granted access. Please contact the administrator if you think this is wrong.'), 'error');
    watchdog('ding_unilogin', 'Access denied for UNI•Login user %user', array('%user' => $username), WATCHDOG_NOTICE);
    _ding_unilogin_in_progress(FALSE);
    return FALSE;
  }

  $auth_res = ding_provider_invoke('user', 'external_authenticate', $user->getName(), NULL, array('retailer_id' => $retailer_id));

  if (!is_array($auth_res) || !isset($auth_res['success'])) {
    watchdog('ding_unilogin', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
    _ding_unilogin_in_progress(FALSE);
    return FALSE;
  }

  if (!$auth_res['success']) {
    _ding_unilogin_in_progress(FALSE);
    return FALSE;
  }

  /*
   * We call two private ding_user functions to do the heavy lifting. Sadly,
   * nobody has re-factored ding_user to have a simple login function, so we
   * have to duplicate its work here.
   */

  // Create new account in Drupal and if one exists update it.
  $account = _ding_user_create_account($user->getAuthName(), $auth_res);

  // Make a note that this is a UNI•Login account in data by saving once more.
  user_save($account, array('data' => array('unilogin' => TRUE)));
  _ding_unilogin_set_user_data($unilogin_data);

  // Check that a profile exists for the user and if not create one.
  _ding_user_create_profile2($account);

  // Save profile data provided by hook_ding_unilogin_login implementations.
  $profile_data = $user->getProfileData();
  if (!empty($profile_data)) {
    $profile = profile2_load_by_user($account->uid, 'provider_publizon');
    $wrapper = entity_metadata_wrapper('profile2', $profile);

    foreach ($profile_data as $field => $value) {
      $wrapper->{$field} = $value;
    }
    $profile->save();
  }

  _ding_unilogin_in_progress(FALSE);

  $form_state['uid'] = $account->uid;
  ding_provider_invoke('user', 'authenticate_finalize', $account);
  user_login_submit(array(), $form_state);
  return TRUE;
}

/**
 * Get a UNI•Login service.
 *
 * @param string $service
 *   The service to get, either 'auth', 'user' or 'inst'.
 *
 * @return \DingUniloginWSIautor|\DingUniloginWSIbruger|\DingUniloginWSIinst
 *   Service object.
 */
function ding_unilogin_wservice($service) {
  switch ($service) {
    case 'auth':
      return new DingUniloginWSIautor(
        variable_get('ding_unilogin_ws_user', ''),
        variable_get('ding_unilogin_ws_pass', '')
      );

    case 'user':
      return new DingUniloginWSIbruger(
        variable_get('ding_unilogin_ws_user', ''),
        variable_get('ding_unilogin_ws_pass', '')
      );

    case 'inst':
      return new DingUniloginWSIinst(
        variable_get('ding_unilogin_ws_user', ''),
        variable_get('ding_unilogin_ws_pass', '')
      );

    default:
      throw new RuntimeException('Bad service type ' . $service);
  }
}

/**
 * Whether we're in the process of logging in a UNI•Login user.
 *
 * We need to be able to determine whether we're in the process of logging in an
 * UNI•Login user, in order to change the Publizon client id for the
 * authentication request.
 *
 * @param bool|null $new_state
 *   New progress state, if not null.
 *
 * @return bool
 *   Whether we're in progress or not.
 */
function _ding_unilogin_in_progress($new_state = NULL) {
  $state = &drupal_static('__FUNCTION__', FALSE);

  if (!is_null($new_state)) {
    $state = $new_state;
  }

  return $state;
}

/**
 * Implements hook_theme().
 */
function ding_unilogin_theme() {
  return array(
    'ding_unilogin_admin_institutions_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Filter institution numbers if requested.
 *
 * @param array $institution_ids
 *   The institution ids.
 *
 * @return array
 *   The filtered institution ids.
 */
function ding_unilogin_filter_institutions(array $institution_ids) {
  if (variable_get('ding_unilogin_institutions_apply_filter', FALSE)) {
    $institutions = _ding_unilogin_get_institutions();
    $institution_ids = array_filter($institution_ids, static function ($institution_id) use ($institutions) {
      return isset($institutions[$institution_id]);
    });
  }

  return $institution_ids;
}

/**
 * Get UNI•Login user data.
 *
 * @return null|array
 *   The previously stored user data if any.
 */
function ding_unilogin_get_user_data() {
  return $_SESSION['ding_unilogin_user_data'] ?? NULL;
}

/**
 * Set UNI•Login user data.
 *
 * @param null|array $data
 *   The data to store or NULL to clear the user data.
 */
function _ding_unilogin_set_user_data(array $data = NULL) {
  if (NULL === $data) {
    unset($_SESSION['ding_unilogin_user_data']);
  }
  else {
    $_SESSION['ding_unilogin_user_data'] = $data;
  }
}

/**
 * Get UNI•Login institutions.
 *
 * @return array
 *   The list of institutions indexed by id.
 */
function _ding_unilogin_get_institutions() {
  return variable_get('ding_unilogin_institutions', []);
}

/**
 * Set UNI•Login institutions.
 *
 * @param array $institutions
 *   The list of institutions indexed by id.
 */
function _ding_unilogin_set_institutions(array $institutions) {
  variable_set('ding_unilogin_institutions', $institutions);

  _ding_unilogin_update_municipalities(array_keys($institutions));
}

/**
 * Update UNI•Login municipalities.
 *
 * @param array $institution_ids
 *   The list of institution ids.
 */
function _ding_unilogin_update_municipalities(array $institution_ids = NULL) {
  if (NULL === $institution_ids) {
    $institution_ids = array_keys(_ding_unilogin_get_institutions());
  }

  /** @var \DingUniloginWSIinst $service */
  $service = ding_unilogin_wservice('inst');
  $municipalities = $service->getInstitutions($institution_ids);

  // Index by institution id.
  $municipalities = array_column($municipalities, null, 'instnr');

  variable_set('ding_unilogin_municipalities', $municipalities);
}

/**
 * Get UNI•Login municipalities.
 *
 * @return array
 *   The list of municipalities id.
 */
function _ding_unilogin_get_municipalities() {
  return variable_get('ding_unilogin_municipalities', []);
}

/**
 * Api router.
 *
 * @return array|\Exception
 *   The data on success or an exception.
 */
function ding_unilogin_api_router() {
  $args = func_get_args();

  try {
    $router = new ApiRouter();
    $result = $router->route($args);

    return $result;
  }
  catch (\Exception $exception) {
    return $exception;
  }
}

/**
 * Deliver data in the JSON:API format (https://jsonapi.org/format/).
 *
 * @param null|array|\Exception $result
 *   The result to return.
 */
function ding_unilogin_jsonapi_deliver($result = NULL) {
  drupal_add_http_header('content-type', 'application/vnd.api+json');
  drupal_page_is_cacheable(FALSE);

  if ($result instanceof \Exception) {
    if ($result instanceof HttpException) {
      drupal_add_http_header('status', $result->getStatusHeader());
    }
    $result = array(
      // @see https://jsonapi.org/format/#error-objects.
      'errors' => array(
        array(
          'title' => $result->getMessage(),
          'code' => $result->getCode(),
        ),
      ),
    );
  }

  if (NULL === $result) {
    drupal_add_http_header('status', '204 No Content');
    exit;
  }

  echo drupal_json_encode($result);
}
